// Code generated by MockGen. DO NOT EDIT.
// Source: newspire.org/die (interfaces: Roller)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRoller is a mock of Roller interface.
type MockRoller struct {
	ctrl     *gomock.Controller
	recorder *MockRollerMockRecorder
}

// MockRollerMockRecorder is the mock recorder for MockRoller.
type MockRollerMockRecorder struct {
	mock *MockRoller
}

// NewMockRoller creates a new mock instance.
func NewMockRoller(ctrl *gomock.Controller) *MockRoller {
	mock := &MockRoller{ctrl: ctrl}
	mock.recorder = &MockRollerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoller) EXPECT() *MockRollerMockRecorder {
	return m.recorder
}

// Roll mocks base method.
func (m *MockRoller) Roll() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Roll")
	ret0, _ := ret[0].(int)
	return ret0
}

// Roll indicates an expected call of Roll.
func (mr *MockRollerMockRecorder) Roll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Roll", reflect.TypeOf((*MockRoller)(nil).Roll))
}

// Value mocks base method.
func (m *MockRoller) Value() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(int)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockRollerMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockRoller)(nil).Value))
}
