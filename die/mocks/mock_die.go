// Code generated by MockGen. DO NOT EDIT.
// Source: newspire.org/die (interfaces: Roll)

// Package mock_die is a generated GoMock package.
package mock_die

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRoll is a mock of Roll interface.
type MockRoll struct {
	ctrl     *gomock.Controller
	recorder *MockRollMockRecorder
}

// MockRollMockRecorder is the mock recorder for MockRoll.
type MockRollMockRecorder struct {
	mock *MockRoll
}

// NewMockRoll creates a new mock instance.
func NewMockRoll(ctrl *gomock.Controller) *MockRoll {
	mock := &MockRoll{ctrl: ctrl}
	mock.recorder = &MockRollMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoll) EXPECT() *MockRollMockRecorder {
	return m.recorder
}

// Roll mocks base method.
func (m *MockRoll) Roll() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Roll")
	ret0, _ := ret[0].(int)
	return ret0
}

// Roll indicates an expected call of Roll.
func (mr *MockRollMockRecorder) Roll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Roll", reflect.TypeOf((*MockRoll)(nil).Roll))
}

// Value mocks base method.
func (m *MockRoll) Value() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(int)
	return ret0
}

// Value indicates an expected call of Value.
func (mr *MockRollMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockRoll)(nil).Value))
}
